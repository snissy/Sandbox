void Chaikin::CornerCutting(const std::vector<vec3>& ControlPolygon,
                            const size_t MinNumDesiredPoints,
                            std::vector<vec3>& Curve)
{
    const int n_iterations = (int) std::ceil(std::log(MinNumDesiredPoints/ControlPolygon.size())/std::log(2));
    //std::cout<<"\n";
    //std::cout<<n_iterations;
            
    //TODO: Extend and edit this code
    
    std::vector<vec3> iterPolygon;
    for(size_t i(0);i<ControlPolygon.size();i++){
        iterPolygon.push_back(ControlPolygon[i]);
    }
    
    for(int iter = 0; iter<n_iterations ; iter++){
        
        Curve.clear();
        
        for(size_t i(0);i<iterPolygon.size();i++)
        {
            const vec3& LeftPoint = iterPolygon[i];
            const vec3& RightPoint = iterPolygon[(i+1) % iterPolygon.size()];
            double t = 1.0/4.0;
            
            Curve.push_back((1-t) * LeftPoint + t * RightPoint);
            Curve.push_back( t*LeftPoint + (1-t) * RightPoint);
        
        }
        
        iterPolygon.clear();
        for(size_t i(0);i<Curve.size();i++){
            iterPolygon.push_back(Curve[i]);
        }
    }
}
